import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from random import randint
%matplotlib inline 
import warnings
warnings.filterwarnings("ignore")

from sklearn.model_selection import train_test_split
def split(df,label):
    X_tr, X_te, Y_tr, Y_te = train_test_split(df, label, test_size=0.25, random_state=42)
    return X_tr, X_te, Y_tr, Y_te

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import KFold, cross_val_score

classifiers = ['RandomForest']

models = [RandomForestClassifier(n_estimators=200, random_state=0)]

def acc_score(df,label):
    Score = pd.DataFrame({"Classifier":classifiers})
    j = 0
    acc = []
    X_train,X_test,Y_train,Y_test = split(df,label)
    for i in models:
        model = i
        model.fit(X_train,Y_train)
        predictions = model.predict(X_test)
        acc.append(accuracy_score(Y_test,predictions))
        j = j+1     
    Score["Accuracy"] = acc
    Score.sort_values(by="Accuracy", ascending=False,inplace = True)
    Score.reset_index(drop=True, inplace=True)
    return Score

def plot(score,x,y,c = "b"):
    gen = [1,2,3,4,5]
    plt.figure(figsize=(6,4))
    ax = sns.pointplot(x=gen, y=score,color = c )
    ax.set(xlabel="Generation", ylabel="Accuracy")
    ax.set(ylim=(x,y))

data_pcos = pd.read_csv(r"C:\Users\Ahnaffiras\Videos\PCOS_data.csv")
label_pcos = data_pcos["PCOS (Y/N)"]
data_pcos.drop(["Sl. No","Patient File No.","PCOS (Y/N)","Unnamed: 44","II    beta-HCG(mIU/mL)","AMH(ng/mL)"],axis = 1,inplace = True)
data_pcos["Marraige Status (Yrs)"].fillna(data_pcos['Marraige Status (Yrs)'].describe().loc[['50%']][0], inplace = True) 
data_pcos["Fast food (Y/N)"].fillna(1, inplace = True) 

print("PCOS dataset:\n",data_pcos.shape[0],"Records\n",data_pcos.shape[1],"Features")

def initilization_of_population(size,n_feat):
    population = []
    for i in range(size):
        chromosome = np.ones(n_feat,dtype=np.bool)     
        chromosome[:int(0.3*n_feat)]=False             
        np.random.shuffle(chromosome)
        population.append(chromosome)
    return population

def fitness_score(population):
    scores = []
    for chromosome in population:
        logmodel.fit(X_train.iloc[:,chromosome],Y_train)         
        predictions = logmodel.predict(X_test.iloc[:,chromosome])
        scores.append(accuracy_score(Y_test,predictions))
    scores, population = np.array(scores), np.array(population) 
    inds = np.argsort(scores)                                    
    return list(scores[inds][::-1]), list(population[inds,:][::-1])

def selection(pop_after_fit,n_parents):
    pop_after_sel = []
    for i in range(n_parents):
        pop_after_sel.append(pop_after_fit[i])
    return pop_after_sel

def crossover(pop_after_sel):
    pop_after_cross = pop_after_sel
    for i in range(0,len(pop_after_sel),2):
        new_par = []
        child_1 , child_2 = pop_after_cross[i] , pop_after_cross[i+1]
        new_par = np.concatenate((child_1[:len(child_1)//2],child_2[len(child_1)//2:]))
        pop_after_cross.append(new_par)
    return pop_after_cross

def mutation(pop_after_cross,mutation_rate,n_feat):   
    mutation_range = int(mutation_rate*n_feat)
    pop_next_gen = []
    for n in range(0,len(pop_after_cross)):
        chromo = pop_after_cross[n]
        rand_posi = [] 
        for i in range(0,mutation_range):
            pos = randint(0,n_feat-1)
            rand_posi.append(pos)
        for j in rand_posi:
            chromo[j] = not chromo[j]  
        pop_next_gen.append(chromo)
    return pop_next_gen

def generations(df, label,size, n_feat, n_parents, mutation_rate, n_gen, X_train, X_test, Y_train, Y_test):
    best_chromo= []
    best_score= []
    population_nextgen=initilization_of_population(size,n_feat)
    for i in range(n_gen):
        scores, pop_after_fit = fitness_score(population_nextgen)
        print('Best score in generation',i+1,':',scores[:1])
        pop_after_sel = selection(pop_after_fit,n_parents)
        print('Selection',':')
        z = pd.DataFrame(pop_after_sel)
        display(z.head())
        print('\n')
        pop_after_cross = crossover(pop_after_sel)
        print('Crossover',':')
        y = pd.DataFrame(pop_after_cross)
        display(y.head())
        print('\n')
        population_nextgen = mutation(pop_after_cross,mutation_rate,n_feat)
        print('Mutation',':')
        x = pd.DataFrame(population_nextgen)
        display(x.head())
        print('\n')
        best_chromo.append(pop_after_fit[0])
        best_score.append(scores[0])
    return best_chromo,best_score

logmodel = RandomForestClassifier(n_estimators=200, random_state=0)
X_train, X_test, Y_train, Y_test = split(data_pcos, label_pcos)

# Jalankan algoritma genetika untuk pertama kali
chromo_df_pcos, score_pcos = generations(data_pcos, label_pcos, size=80, n_feat=data_pcos.shape[1], n_parents=64, mutation_rate=0.20, n_gen=5, X_train=X_train, X_test=X_test, Y_train=Y_train, Y_test=Y_test)

# Ambil kromosom terbaik dari generasi terakhir
best_chromosome_last_gen = chromo_df_pcos[0]
a = pd.DataFrame(best_chromosome_last_gen)
a_transposed = a.transpose()
print('Best Chromosome',':','\n')
display(a_transposed)

# (Opsional) Tampilkan fitur terbaik jika diperlukan
best_features = [f"Fitur {i+1}" for i, include_feature in enumerate(best_chromosome_last_gen) if include_feature]
b = pd.DataFrame(best_features)
b_transposed = b.transpose()
print('Best Features',':','\n')
display(b_transposed)

plot(score_pcos,0.9,1.0,c = "limegreen")
